# Craftverse - Directory Structure

## Server
### Main Files
- server/server.js - Main server implementation, handles socket connections, game state, etc.
- server/saveSystem.js - Handles saving and loading game data

### Archaeology
- server/archaeology/archaeologyManager.js - Manages archaeology mechanics and loot generation
- server/archaeology/brushItem.js - Implementation of the brush tool for excavation
- server/archaeology/suspiciousSandBlock.js - Implementation of suspicious sand blocks
- server/archaeology/suspiciousGravelBlock.js - Implementation of suspicious gravel blocks

### Mobs
- server/mobs/mobManager.js - Manages mob spawning, updates, and interactions
- server/mobs/mobBase.js - Base class for all mobs with common functionality
- server/mobs/passiveMobs.js - Implementation of passive mobs (Sheep, Cow, Pig, Chicken, etc.)
- server/mobs/neutralMobs.js - Implementation of neutral mobs (Wolf, Spider, Enderman, Goat, etc.)
- server/mobs/hostileMobs.js - Implementation of hostile mobs (Zombie, Skeleton, Creeper, etc.)
- server/mobs/netherMobs.js - Implementation of nether-specific mobs (Piglin, Hoglin, etc.)
- server/mobs/aquaticMobs.js - Implementation of aquatic mobs (Squid, GlowSquid, etc.)
- server/mobs/axolotl.js - Implementation of Axolotl mob for Caves & Cliffs update
- server/mobs/frogAndTadpole.js - Implementation of Frog and Tadpole mobs for the Wild Update
- server/mobs/villagerNPC.js - Implementation of Villager NPCs with professions and trading
- server/mobs/zombieVillager.js - Implementation of Zombie Villagers with curing mechanics
- server/mobs/warden.js - Implementation of Warden mob with vibration-based sensing AI
- server/mobs/allay.js - Implementation of Allay mob with flying, item collection, and note block interaction
- server/mobs/breeze.js - Implementation of Breeze mob with wind-based attacks and flying mechanics for 1.21 Tricky Trials update
- server/mobs/copperGolem.js - Implementation of Copper Golem mob for the 1.23 Update
- server/mobs/trailblazerVillager.js - TrailblazerVillager class that extends VillagerNPC with specialized exploration-focused behavior and trades.

### Entities
- server/entities/entity.js - Base class for all entities in the game. Provides common functionality like physics, collision detection, serialization, and event handling.
- server/entities/entityManager.js - Manages all entities in the game world, handles spawning, removal, and updates.
- server/entities/entityFactory.js - Factory for creating different entity types.
- server/entities/boat.js - Implementation of the boat entity, including boats with chests for the Wild Update.
- server/entities/thrownPotion.js - Implementation of thrown potion entities.
- server/entities/areaEffectCloud.js - Implementation of area effect clouds from potions.
- server/entities/endCrystal.js - Implementation of end crystals for the Ender Dragon fight.
- server/entities/enderDragon.js - Implementation of the Ender Dragon boss.
- server/entities/statusEffectManager.js - Manages status effects on entities.
- server/entities/windChargeEntity.js - Implementation of Wind Charge projectile entity that moves blocks and entities

### Items
- server/items/item.js - Base class for all items in the game. Provides common functionality like durability, use actions, serialization, and event handling.
- server/items/flintAndSteelItem.js - Implementation of flint and steel for lighting fires and portals
- server/items/foodItem.js - Base class for food items with hunger and saturation restoration
- server/items/glowBerryItem.js - Implementation of the glow berry item that can be eaten as food and used to plant cave vines. Extends the base Item class.
- server/items/inkSacItem.js - Implementation of ink sacs obtained from squids
- server/items/netheriteItems.js - Implementation of netherite equipment and tools
- server/items/potionItem.js - Implementation of potions with various effects
- server/items/potionRecipes.js - Implementation of brewing recipes
- server/items/potionRegistry.js - Registry of all potion types and effects
- server/items/shield.js - Implementation of shield mechanics
- server/items/shieldItem.js - Implementation of shield items with durability and banner patterns
- server/items/specialArrows.js - Implementation of special arrow types like tipped arrows
- server/items/itemRegistry.js - Central registry for all items in the game
- server/items/boatItem.js - Implementation of boat items, including boats with chests for the Wild Update
- server/items/netheriteUpgradeTemplate.js - Implementation of the smithing template required for upgrading diamond equipment to netherite in the 1.20 update
- server/items/windChargeItem.js - Implementation of Wind Charge item from the 1.21 Tricky Trials update, thrown to push entities and blocks
- server/items/potterySherdItem.js - Implementation of pottery sherds, archaeological artifacts
- server/items/chiseledBookshelfItem.js - Implementation of the Chiseled Bookshelf item that places the bookshelf block
- server/items/mapItem.js - Base map item implementation that shows the world.
- server/items/biomeMapItem.js - Specialized map for finding specific biomes.
- server/items/structureMapItem.js - Specialized map for finding structures.
- server/items/compassItem.js - Base compass implementation for directional guidance.
- server/items/explorerCompassItem.js - Specialized compass that points to unexplored areas, biomes, or structures.
- server/items/trailMarkerItem.js - Placeable markers for creating exploration paths.
- server/items/ancientSeedItem.js - Implementation of Ancient Seeds items for the 1.23 Update

### Blocks
- server/blocks/amethystBlock.js - Implementation of amethyst block and amethyst cluster growth
- server/blocks/amethystCluster.js - Implementation of amethyst clusters
- server/blocks/baseBlock.js - Base Block class for all block types with common functionality
- server/blocks/blockRegistry.js - Registry for block types with management functionality
- server/blocks/buddingAmethyst.js - Implementation of budding amethyst block
- server/blocks/calciteBlock.js - Implementation of calcite found in amethyst geodes
- server/blocks/candleBlock.js - Implementation of candles with stacking and colored variants
- server/blocks/caveVineBlock.js - Implementation of cave vines that can grow and produce glow berries. Includes CaveVineBlock (base class), CaveVineHeadBlock (end segments where berries grow), and CaveVineBodyBlock (middle segments).
- server/blocks/cavesCliffsBlocks.js - Implementation of various Caves & Cliffs blocks
- server/blocks/chorusPlantBlock.js - Implementation of End chorus plants
- server/blocks/deepslateVariants.js - Implementation of deepslate and its variants
- server/blocks/dripleafBlock.js - Implementation of big and small dripleaf plants
- server/blocks/dripstoneBlock.js - Implementation of dripstone block
- server/blocks/endGatewayBlock.js - Implementation of End gateway blocks for teleportation
- server/blocks/endPortalBlock.js - Implementation of End portal blocks
- server/blocks/endPortalFrameBlock.js - Implementation of End portal frame blocks
- server/blocks/fireBlock.js - Implementation of fire blocks with spreading mechanics
- server/blocks/largeAmethystBud.js - Implementation of large amethyst buds
- server/blocks/mediumAmethystBud.js - Implementation of medium amethyst buds
- server/blocks/mossBlock.js - Implementation of moss blocks with spreading mechanics
- server/blocks/netherBlocks.js - Implementation of Nether-specific blocks
- server/blocks/netherPortalBlock.js - Implementation of Nether portal blocks
- server/blocks/pointedDripstoneBlock.js - Implementation of pointed dripstone with growth/falling
- server/blocks/powderSnowBlock.js - Implementation of powder snow with entity sinking
- server/blocks/prismarineBlocks.js - Implementation of prismarine blocks for ocean monuments
- server/blocks/smallAmethystBud.js - Implementation of small amethyst buds
- server/blocks/soulFireTorch.js - Implementation of soul fire torches
- server/blocks/sporeBlossomBlock.js - Implementation of spore blossom with particle effects
- server/blocks/tuffBlock.js - Implementation of tuff found near geodes and in dripstone caves
- server/blocks/sculkBlock.js - Implementation of the base sculk block for the Deep Dark biome
- server/blocks/sculkVeinBlock.js - Implementation of sculk vein blocks that grow on surfaces
- server/blocks/sculkCatalystBlock.js - Implementation of sculk catalyst for spreading sculk
- server/blocks/sculkSensorBlock.js - Implementation of sculk sensor with vibration detection
- server/blocks/sculkShriekerBlock.js - Implementation of sculk shrieker for summoning the Warden
- server/blocks/chiseledBookshelfBlock.js - Implementation of the Chiseled Bookshelf block for the Trails & Tales Update
- server/blocks/ancientPlantBlock.js - Implementation of Ancient Plants that grow from Ancient Seeds

### Biomes
- server/biomes/baseBiome.js - Base class for all biomes
- server/biomes/biomeManager.js - Manages biome selection and blending
- server/biomes/biomeRegistry.js - Registry of all available biomes
- server/biomes/desertBiome.js - Implementation of desert biome
- server/biomes/forestBiome.js - Implementation of forest biome
- server/biomes/jungleBiome.js - Implementation of jungle biome
- server/biomes/lushCavesBiome.js - Implementation of lush caves biome for Caves & Cliffs
- server/biomes/mountainsBiome.js - Implementation of mountains biome
- server/biomes/mountainGoatBiome.js - Implementation of mountain goat biome variant
- server/biomes/oceanBiome.js - Implementation of ocean biomes
- server/biomes/plainsBiome.js - Implementation of plains biome
- server/biomes/deepDarkBiome.js - Implementation of deep dark biome for the Wild Update

### World
- server/world/chunkLoader.js - Handles loading and unloading chunks as needed
- server/world/dimensionManager.js - Manages different dimensions (Overworld, Nether, End)
- server/world/endDimension.js - Implementation of End dimension
- server/world/netherDimension.js - Implementation of Nether dimension
- server/world/portalManager.js - Manages portal creation and teleportation
- server/world/villageReputationManager.js - Manages player reputation with villages
- server/world/worldGenerator.js - Handles world generation

### Utils
- server/utils/mathUtils.js - Utility functions for mathematics
- server/utils/noiseGenerator.js - Noise generation for terrain
- server/utils/structureGenerator.js - Handles generation of structures
- server/utils/villageGenerator.js - Handles generation of villages
- server/utils/structures/ancientCityGenerator.js - Handles generation of Ancient City structures in Deep Dark biomes

### Particles
- server/particles/particleSystem.js - Particle management system for visual effects

### Weather
- server/weather/weatherSystem.js - Weather system that manages weather states and transitions

### Tests
- server/tests/axolotlTest.js - Tests for Axolotl implementation
- server/tests/aquaticMobsTest.js - Tests for Squid and GlowSquid mobs
- server/tests/calciteBlockTest.js - Tests for Calcite block
- server/tests/candleBlockTest.js - Tests for Candle blocks including colored variants and stacking
- server/tests/deepslateVariantsTest.js - Tests for Deepslate variants
- server/tests/glowBerryTest.js - Comprehensive tests for glow berries and cave vines implementation. Tests food functionality, planting mechanics, light emission, and serialization.
- server/tests/goatTest.js - Tests for Goat implementation
- server/tests/mountainGoatBiomeTest.js - Tests for Mountain Goat biome
- server/tests/netherBlocksTest.js - Tests for Nether blocks
- server/tests/powderSnowBlockTest.js - Tests for Powder Snow block
- server/tests/sporeBlossomTest.js - Tests for Spore Blossom implementation
- server/tests/tuffBlockTest.js - Tests for Tuff block
- server/tests/archaeologyTest.js - Tests for archaeology system implementation
- server/tests/weatherSystemTest.js - Tests for the Weather System implementation
- server/tests/weatherLightningIntegrationTest.js - Integration tests for Weather System and Lightning Rod
- server/tests/simpleLightningTest.js - Simple tests focusing on core functionality of lightning
- server/tests/deepDarkBiomeTest.js - Tests for the Deep Dark biome implementation
- server/tests/sculkBlockTest.js - Tests for the base SculkBlock implementation
- server/tests/sculkVeinTest.js - Tests for SculkVeinBlock implementation
- server/tests/sculkCatalystTest.js - Tests for SculkCatalystBlock implementation
- server/tests/sculkSensorTest.js - Tests for SculkSensorBlock vibration detection
- server/tests/sculkShriekerTest.js - Tests for SculkShriekerBlock warning and Warden summoning
- server/tests/wardenTest.js - Tests for the Warden mob implementation and vibration sensing behavior
- server/tests/runWardenTest.js - Test runner for the Warden tests
- server/tests/ancientCityTest.js - Tests for Ancient City structure generation
- server/tests/runAncientCityTest.js - Test runner for Ancient City tests
- server/tests/frogAndTadpoleTest.js - Tests for Frog and Tadpole mobs implementation
- server/tests/runFrogAndTadpoleTest.js - Test runner for Frog and Tadpole tests
- server/tests/allayTest.js - Tests for Allay mob implementation with item collection and note block behaviors
- server/tests/runAllayTest.js - Test runner for Allay tests
- server/tests/boatWithChestTest.js - Tests for Boat with Chest implementation, inventory system, and item drop mechanics
- server/tests/runBoatWithChestTest.js - Test runner for Boat with Chest tests
- server/tests/chiseledBookshelfTest.js - Tests for the Chiseled Bookshelf implementation
- server/tests/netheriteUpgradeTemplateTest.js - Tests for the Netherite Upgrade Template implementation
- server/tests/runNetheriteUpgradeTemplateTest.js - Test runner for the Netherite Upgrade Template tests
- server/tests/breezeTest.js - Tests for the Breeze mob implementation with flying mechanics and wind attacks
- server/tests/runBreezeTest.js - Test runner for the Breeze mob tests
- server/tests/windChargeTest.js - Tests for the Wind Charge item and entity implementation with block and entity pushing mechanics
- server/tests/runWindChargeTest.js - Test runner for the Wind Charge tests
- server/tests/trailblazerTest.js - Test suite for Trailblazer villager profession, maps, compass, and markers.
- server/tests/runTrailblazerTest.js - Test runner for the Trailblazer tests.
- server/tests/ancientSeedsTest.js - Tests for the Ancient Seeds feature, including seed variants, plant growth, crossbreeding, and special effects.
- server/tests/runAncientSeedsTest.js - Test runner for the Ancient Seeds feature tests.
- server/tests/minecraft123IntegrationTest.js - Integration tests for all Minecraft 1.23 Update features to ensure they work together correctly.
- server/tests/runMinecraft123IntegrationTest.js - Test runner for the Minecraft 1.23 Update integration tests.
- server/tests/testBase.js - Base class for all test suites providing common functionality for running tests and reporting results.
- server/tests/minecraft124TestFramework.js - Test framework for the Minecraft 1.24 Update (Trail Tales) features.
- server/tests/runMinecraft124Tests.js - Test runner for the Minecraft 1.24 Update test framework.

## Client
- public/index.html - Main client page
- public/js/client.js - Client-side game logic
- public/js/renderer.js - Handles rendering the game world
- public/css/styles.css - Styling for the game interface

## Core Files
- ai-logic.txt - Tracks the development progress and implementation details
- project.txt - Project tracking for current development focus
- directory.txt - This file, listing all important files in the project

# Trails & Tales Update Files

## server/archaeology/archaeologyManager.js
This is the main manager for the archaeology system. It handles:
- Archaeological site generation in the world
- Excavation mechanics when players use brushes on suspicious blocks
- Loot tables for different archaeological site types
- Integration with the World class to handle brush interactions
- Serialization/deserialization of archaeological sites

## server/items/brushItem.js
This is the implementation of the Brush tool used for archaeology:
- Different brush types (wood, copper, iron, gold, netherite) with varying durabilities
- Handling interaction with suspicious blocks to start excavation
- Particle effects during brushing
- Durability management

## server/blocks/suspiciousBlocks.js
This file contains implementations for suspicious blocks that can be excavated:
- SuspiciousBlock: Base class with common functionality
- SuspiciousSandBlock: Found in desert biomes
- SuspiciousGravelBlock: Found in plains/mountains/river biomes
- Logic for converting to normal blocks after excavation
- Physics behavior (falling) consistent with base block types

## server/world.js
This is the main World class that integrates all world systems:
- Block management
- Entity management
- Player interaction
- Integration with archaeology system
- Serialization/deserialization

## server/tests/archaeologyTest.js
This contains comprehensive tests for the archaeology system:
- Unit tests for ArchaeologyManager
- Unit tests for BrushItem
- Unit tests for SuspiciousBlocks
- Unit tests for PotterySherdItem
- Integration tests for the complete excavation workflow

## server/tests/runArchaeologyTest.js
This is a simple runner script to execute the archaeology tests.

## server/blocks/chiseledBookshelfBlock.js
This file implements the Chiseled Bookshelf block for the Trails & Tales Update. It provides:
- 6-slot inventory system for storing different types of books
- Redstone signal output based on number of filled slots
- Slot-specific interaction through player click positioning
- Rotation-aware front face detection for interaction
- Serialization/deserialization for persistent storage

## server/items/chiseledBookshelfItem.js
This file implements the Chiseled Bookshelf item that places the bookshelf block:
- Places a ChiseledBookshelfBlock in the world
- Sets the block's rotation based on player facing direction
- Provides tooltip information about the block's capabilities

## server/tests/chiseledBookshelfTest.js
This file contains comprehensive tests for the Chiseled Bookshelf implementation:
- Tests basic properties of the block and item
- Tests book storage and retrieval functionality
- Tests slot-specific interactions
- Tests redstone signal output based on filled slots
- Tests serialization and deserialization
- Tests block breaking and item drops

## server/chiseled-bookshelf-implementation.md
Documentation file describing the implementation details of the Chiseled Bookshelf feature.

## server/docs/future-updates-plan.txt
This document outlines the future development roadmap for the Craftverse project. It includes:
- Detailed plans for implementing Minecraft 1.21 (Tricky Trials) features
- Technical improvements roadmap for performance and multiplayer
- Gameplay enhancement plans for combat, UI/UX, and modding support
- Prioritized feature backlog for upcoming development
- Technical debt reduction strategies
- Timeline estimates for future development phases

# 1.21 Update (Tricky Trials) Files

## server/blocks/crafterBlock.js
This file implements the Crafter block from the 1.21 Update, which provides automated crafting functionality:
- 3x3 crafting grid for item placement
- Redstone-powered automation
- Directional placement (faces the player when placed)
- Cooldown system to prevent rapid crafting
- Inventory management for crafting ingredients and results

## server/items/crafterItem.js
This file implements the item that places the Crafter block:
- Places CrafterBlock with correct player-facing orientation
- Includes descriptive tooltip
- Handles placement validation

## server/tests/crafterBlockTest.js
This file contains comprehensive tests for the Crafter block implementation:
- Tests basic properties (hardness, tool type)
- Tests inventory management
- Tests crafting behavior and ingredient consumption
- Tests facing direction
- Tests registry integration
- Tests serialization/deserialization
- Tests item dropping when broken

## server/tests/runCrafterBlockTest.js
This is a test runner for the Crafter block tests.

## server/structures/trialChamber.js
This file implements the Trial Chamber structure for the 1.21 Update:
- Structure layout and room generation
- Treasure room placement
- Mob spawner placement
- Corridor generation
- Decoration and loot placement

## server/blocks/trialSpawner.js
This file implements the Trial Spawner block:
- Mob wave spawning mechanics
- Reward chest generation
- Interaction with Trial Chambers

## server/utils/structures/trialChamberGenerator.js
This file contains the generation logic for Trial Chambers:
- Procedural room generation
- Structure component assembly
- Loot table integration
- Trial spawner placement

## server/tests/trialChamberTest.js
This file contains tests for the Trial Chamber implementation:
- Tests structure generation
- Tests room layouts
- Tests trial spawner functionality
- Tests loot generation
- Tests integration with world generation

## server/tests/runTrialChamberTest.js
This is a test runner for the Trial Chamber tests.

# 1.22 Update (Sorcery Update) Files

## server/magic/spellManager.js
This is the main manager for the spell mechanics system:
- Handles spell registration and management
- Processes spell casting and effects
- Manages player spell knowledge
- Tracks mana resources and cooldowns
- Handles active spell effects
- Integrates with server event system

## server/magic/spellRegistry.js
This file defines and categorizes different spell types:
- Defines spell categories (attack, defense, utility, etc.)
- Defines spell elements (fire, water, earth, air, etc.)
- Defines spell rarity levels and target types
- Registers default spells with properties
- Provides methods for retrieving and filtering spells

## server/magic/items/spellBookItem.js
This file implements spell books that can teach and cast spells:
- Contains specific spells with level information
- Provides learning functionality
- Enables spell casting with durability
- Includes visual elements for different rarities and elements
- Supports serialization for persistence

## server/magic/items/spellScrollItem.js
This file implements single-use spell scrolls:
- Contains spells for one-time use
- Can bypass mana requirements
- Can bypass spell knowledge requirements
- Provides visual distinction based on contained spell
- Supports stackability

## server/magic/blocks/spellAltarBlock.js
This file implements the block used for crafting spells:
- Provides 5-slot inventory system
- Implements recipe-based crafting
- Creates timed crafting process with effects
- Validates ingredients and requirements
- Supports upgrading existing spells

## server/tests/spellSystemTest.js
This file contains comprehensive tests for the spell system:
- Tests for SpellRegistry
- Tests for SpellManager
- Tests for SpellBookItem
- Tests for SpellScrollItem
- Tests for SpellAltarBlock
- Integration tests for the full spell system

## server/tests/runSpellSystemTest.js
This is a test runner for the spell system tests.

# 1.23 Update Planning Files

## server/docs/minecraft-1.23-research.md
This document contains research on the announced features for Minecraft 1.23:
- Describes the Trailblazer villager profession
- Outlines Decorated Pots Expansion features
- Details Tamed Animal Improvements
- Explains the Copper Golem implementation
- Discusses Ancient Seeds mechanics
- Analyzes technical requirements for each feature
- Proposes implementation priorities

## server/docs/minecraft-1.23-implementation-plan.md
This document outlines the implementation plan for Minecraft 1.23 features:
- Provides a phased implementation roadmap
- Details technical approaches for each feature
- Identifies dependencies and risks
- Defines success criteria
- Includes a week-by-week development schedule

## server/tests/minecraft123TestFramework.js
This file contains the test framework for Minecraft 1.23 features:
- Test suite for Copper Golem
- Test suite for Trailblazer villager profession
- Test suite for Tamed Animal Improvements
- Test suite for Decorated Pots Expansion
- Test suite for Ancient Seeds
- Integration test suite
- Main test runner function

## server/tests/runMinecraft123Tests.js
This is a test runner for the Minecraft 1.23 test framework.

# 1.23 Update Implementation Files

## server/mobs/copperGolem.js
This file implements the Copper Golem mob from the 1.23 Update:
- Base entity implementation with physical properties
- Oxidation system with 4 states affecting behavior
- Button detection and interaction capabilities
- Waxing mechanics to prevent oxidation
- Scraping mechanics to revert oxidation
- Construction system from copper blocks and carved pumpkin
- Serialization/deserialization for persistence
- Integration with redstone systems

## server/tests/copperGolemTest.js
This file contains comprehensive tests for the Copper Golem implementation:
- Tests basic properties and initialization
- Tests oxidation mechanics through all states
- Tests button interaction and targeting
- Tests waxing and scraping functionality
- Tests statue behavior when fully oxidized
- Tests construction from blocks
- Tests serialization/deserialization

## server/tests/runCopperGolemTest.js
This is a test runner for the Copper Golem tests.

### Additional Directories

- server/magic/ - Contains all magic system components for the Sorcery Update
- server/copper/ - Contains copper golem components and utility functions
- server/trailblazer/ - Contains trailblazer villager profession components
  - server/trailblazer/trailblazerItemRegistry.js - Registry for all Trailblazer-related items and recipes
  - server/trailblazer/trailblazerManager.js - Manager that integrates Trailblazer villagers and item systems with the game world

# Minecraft 1.23 Update - Ancient Seeds Feature Files

## server/items/ancientSeedItem.js
This is the implementation of Ancient Seeds items for the 1.23 Update:
- Base class with common functionality for all seed variants
- Support for multiple variants (torchflower, pitcher_pod, mystic, crystal, arcane, frost)
- Variant-specific properties (rarity, growth time, biome preferences)
- Biome integration for optimal growth conditions
- Special effects for rare variants
- Crossbreeding mechanics for producing new variants
- Loot tables for various sources (Sniffer finds, chests, etc.)

## server/blocks/ancientPlantBlock.js
This is the implementation of Ancient Plants that grow from Ancient Seeds:
- Growth stages with progressive visuals
- Growth logic with biome-specific growth rates
- Environmental requirements (light, moisture, temperature)
- Harvesting mechanics with drops based on growth stage
- Crossbreeding with nearby plants
- Special effects for fully grown plants
- Variant-specific behaviors and properties

## server/tests/ancientSeedsTest.js
This file contains comprehensive tests for the Ancient Seeds feature:
- Unit tests for AncientSeedItem
- Tests for growth mechanics of AncientPlantBlock
- Tests for seed variants and their properties
- Tests for harvesting mechanics
- Tests for crossbreeding functionality
- Tests for biome integration
- Tests for special effects

## server/tests/runAncientSeedsTest.js
This is a simple runner script to execute the Ancient Seeds tests.

## server/items/itemRegistry.js (updated)
Updated to include registration of Ancient Seeds items via register123AncientSeedsItems() method.

## server/blocks/blockRegistry.js (updated)
Updated to include registration of Ancient Plant blocks via register123AncientSeedsBlocks() method.

## server/world/worldGenerator.js (updated)
Updated to include natural generation of Ancient Plants in appropriate biomes.

## server/docs/
- server/docs/future-updates-plan.txt - This document outlines the future development roadmap for the Craftverse project
- server/docs/minecraft-1.23-research.md - Research document on the Minecraft 1.23 Update features
- server/docs/minecraft-1.23-implementation-plan.md - Implementation plan for the Minecraft 1.23 Update features
- server/docs/minecraft-1.24-research.md - Research document on the Minecraft 1.24 (Trail Tales) Update features
- server/docs/wind-charge-improvements.md - Detailed implementation plan for Wind Charge Improvements feature

# Trail Ruins Feature Files

## Structure Files
- server/structures/trailRuins.js
  Description: Main Trail Ruins structure class
  Function: Handles structure creation, validation, and world integration
  Called by: WorldGenerator, StructureManager

- server/utils/structures/trailRuinsGenerator.js
  Description: Trail Ruins structure generator
  Function: Handles procedural generation of Trail Ruins structures
  Called by: TrailRuins class

## Test Files
- server/tests/trailRuinsTest.js
  Description: Comprehensive test suite for Trail Ruins
  Function: Tests all aspects of Trail Ruins functionality
  Called by: TestRunner

## Documentation
- server/structures/docs/trailRuinsResearch.md
  Description: Research documentation for Trail Ruins
  Function: Contains design decisions and implementation details
  Called by: Documentation system

## Loot Tables
- server/data/loot_tables/trail_ruins/common.json
  Description: Common loot table for Trail Ruins
  Function: Defines common items found in Trail Ruins
  Called by: LootManager

- server/data/loot_tables/trail_ruins/uncommon.json
  Description: Uncommon loot table for Trail Ruins
  Function: Defines uncommon items found in Trail Ruins
  Called by: LootManager

- server/data/loot_tables/trail_ruins/rare.json
  Description: Rare loot table for Trail Ruins
  Function: Defines rare items found in Trail Ruins
  Called by: LootManager

server/game/game.js
- Main Game class that manages the overall game state
- Handles player management, game settings, and world state
- Called by: GameServer, World, Player
- Dependencies: EventEmitter, World, Player

server/tests/gameTest.js
- Test suite for the Game class
- Tests initialization, player management, game settings, etc.
- Called by: Test runner
- Dependencies: Game, World, Player

Vault Portal System:
- server/tests/vaultPortalTest.js
  Description: Test suite for Vault Portal functionality
  Called by: Test runner
  Dependencies: World, VaultPortalBlock, VaultPortalItem, VaultDimension, VaultPortalManager

- server/blocks/vaultPortalBlock.js
  Description: Implementation of the Vault Portal block
  Called by: VaultPortalManager, World
  Dependencies: Block, Vector3

- server/items/vaultPortalItem.js
  Description: Implementation of the Vault Portal item
  Called by: Player, Inventory
  Dependencies: Item, VaultPortalBlock

- server/dimensions/vaultDimension.js
  Description: Implementation of the Vault dimension
  Called by: VaultPortalManager, World
  Dependencies: Dimension, Vector3, RoomGenerator, LootTable

- server/systems/vaultPortalManager.js
  Description: Manages Vault Portal registration, linking, and teleportation
  Called by: World, Player
  Dependencies: EventEmitter, VaultPortalBlock 